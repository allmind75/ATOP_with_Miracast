package com.atop.main;

import java.io.File;

import com.atop.keyboard.KeyboardMouseActivity;

import android.content.Context;
import android.media.MediaPlayer;
import android.os.AsyncTask;
import android.util.Log;
import android.view.SurfaceHolder;
import android.view.SurfaceHolder.Callback;
import android.view.SurfaceView;

public class VideoViewMain extends SurfaceView implements Callback {
	private final String TAG = "Class::VideoView";
	private static int[] FILE_ARR;
	private static int DelayTime = 5000;
	private SurfaceHolder mSurfaceHolder;
	private SurfaceHolder mholder;
	public static MediaPlayer mPlayer;
	String path = "/sdcard/ATOP/Stream";
	String fileBack = "";
	private static int CUR_FILE_NUM = -1;
	private File CUR_file;
	private int Cur_time = 0;
	boolean ispause = false;
	boolean isSeek = false;
	boolean isPlay = true;
	int seekcnt = 0;
	int DelayMode = 0;
	SeekbarAsync seekbarA;
	private int AllfileSize = 0;
	private int cutfileSize = 0;
	DelayAsync Delaynext, Delayback;

	public VideoViewMain(Context context) {
		super(context);
		mSurfaceHolder = getHolder();
		mSurfaceHolder.addCallback(this);
		FILE_ARR = new int[21];
		File dirfile = new File(path);
		if (!dirfile.exists()) { // 폴더만들기
			dirfile.mkdirs();
		}
		path += "/temp";
	}

	public void setAllfileSize(int size) {
		this.AllfileSize = size;
		//cutfileSize = AllfileSize / 20;
		cutfileSize = AllfileSize;
	}

	public void saveFile(int check) {
		FILE_ARR[check] = 1;
	}

	private String getpath(boolean up) {
		CUR_FILE_NUM++;
		String rpath = path + CUR_FILE_NUM + fileBack;
		if (up == false) {
			CUR_FILE_NUM--;
		}
		return rpath;
	}

	private String backpath(boolean down) {
		CUR_FILE_NUM--;
		String rpath = path + CUR_FILE_NUM + fileBack;
		if (down == false)
			CUR_FILE_NUM++;
		return rpath;
	}

	public void NextVideoPre() {
		DelayMode = 1;
		Delaynext = new DelayAsync();
		Delaynext.execute();
	}

	public void BeckVideoPre() {
		DelayMode = 2;
		Delayback = new DelayAsync();
		Delayback.execute();
	}

	public void videoPlay(int mode) {
		if (DelayMode != 0) {
			if (DelayMode == 1)
				Delaynext.cancel(true);
			else
				Delayback.cancel(true);
			DelayMode = 0;
		}

		if (mode == 1) {
			CUR_file = new File(getpath(false)); // 파일이 존재하면 플레이... 그런데 없으면 어쩔?
			try {
				if (FILE_ARR[CUR_FILE_NUM + 1] == 1) {
					mPlayer.stop();
					mPlayer.reset();

					mPlayer.setDataSource(getpath(true));
					mPlayer.prepare();
					mPlayer.start();

				} else { // 잠시만 기다려주세요ㅋㅋ 다시 틀기 ㅋㅋㅋㅋ cur file 을 ㅋㅋㅋㅋㅋ
					isPlay = false;
					NextVideoPre();
				}
			} catch (Exception e) {// 잠시만 기다려주세요ㅋㅋ
				isPlay = false;
				NextVideoPre();
				Log.e(TAG, "끄앙 주금");
			}
		} else {
			CUR_file = new File(backpath(false)); // 파일이 존재하면 플레이... 그런데 없으면 어쩔?
			try {
				if (FILE_ARR[CUR_FILE_NUM - 1] == 1) {
					mPlayer.stop();
					mPlayer.reset();
					
					mPlayer.setDataSource(backpath(true));
					mPlayer.prepare();
					mPlayer.start();
					int last = mPlayer.getDuration();
					mPlayer.seekTo(last - 5000);

				} else { // 잠시만 기다려주세요ㅋㅋ
					isPlay = false;
					BeckVideoPre();
				}
			} catch (Exception e) {// 잠시만 기다려주세요ㅋㅋ
				isPlay = false;
				BeckVideoPre();
			}
		}
	}

	public void startVideo(String fileback) {
		if (CUR_FILE_NUM == -1) { // 이건 처음에
			this.fileBack = fileback;
			videoPlay(1);
			seekbarA = new SeekbarAsync();
			seekbarA.execute();
		}
		if (ispause) {// 일시정지 중에서 시작을 눌렀을때
			mPlayer.start();
			ispause = false;
		}
	}

	public void stopVideo() {
		mPlayer.stop();
		CUR_FILE_NUM = -1;
		videoPlay(1);
		mPlayer.pause();
	}

	public void pauseVideo() {
		mPlayer.pause();
		ispause = true;
	}

	public void preVideo() {
		if (mPlayer.getCurrentPosition() + DelayTime >= CUR_file.length()) {
			mPlayer.pause();
			isPlay = false;
			videoPlay(1); // 다음 친구로 틀어주기
		} else {
			if (isSeek || seekcnt > 2) {
				seekcnt = 0;
				isSeek = false;
				mPlayer.seekTo(mPlayer.getCurrentPosition() + DelayTime);
			} else
				seekcnt++;
		}
	}

	public void backVideo() {
		if (mPlayer.getCurrentPosition() - DelayTime <= 0) {
			if (CUR_FILE_NUM == 0) {
				mPlayer.seekTo(0);
			} else {// 이전 친구로 틀어주기
				mPlayer.pause();
				isPlay = false;
				videoPlay(2);
			}
		} else {
			if (isSeek || seekcnt > 2) {
				seekcnt = 0;
				isSeek = false;
				mPlayer.seekTo(mPlayer.getCurrentPosition() - DelayTime);
			} else
				seekcnt++;
		}
	}

	@Override
	public void surfaceCreated(SurfaceHolder holder) {
		if (mPlayer == null)
			mPlayer = new MediaPlayer();
		else
			mPlayer.reset();
		this.mholder = holder;
		mPlayer.setOnCompletionListener(mCom);
		mPlayer.setOnSeekCompleteListener(mSeek);
		mPlayer.setDisplay(mholder);
	}

	MediaPlayer.OnSeekCompleteListener mSeek = new MediaPlayer.OnSeekCompleteListener() {

		@Override
		public void onSeekComplete(MediaPlayer mp) {
			isSeek = true;

		}
	};

	MediaPlayer.OnCompletionListener mCom = new MediaPlayer.OnCompletionListener() {
		public void onCompletion(MediaPlayer mp) {
			if (isPlay) {
				videoPlay(1);
			} else
				isPlay = true;
		}
	};

	@Override
	public void surfaceChanged(SurfaceHolder holder, int format, int width,
			int height) {

	}

	@Override
	public void surfaceDestroyed(SurfaceHolder holder) {
		CUR_FILE_NUM = -1;
		if (mPlayer != null) {
			mPlayer.release();
		}
		seekbarA.onCancelled();
		if (!Delaynext.isCancelled())
			Delaynext.onCancelled();
		if (!Delayback.isCancelled())
			Delayback.onCancelled();
	}

	class DelayAsync extends AsyncTask<Void, Void, Void> {
		int checkfile = 0;
		boolean isasync = true;

		@Override
		protected void onPreExecute() { // 작업시작전
			if (DelayMode == 1)
				checkfile = CUR_FILE_NUM + 1; // 다음께 다 들어올때 까지 기다리라는 말이고
			else
				checkfile = CUR_FILE_NUM - 1; // 전꺼가 다 들어올때 까지 기다리라는 말이다.
		}

		@Override
		protected Void doInBackground(Void... params) { // 내부에서 하는작업
			while (isasync) {
				try {
					Thread.sleep(1000);
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				if (FILE_ARR[checkfile] == 1) {
					videoPlay(DelayMode);
					isasync = false;
				}
				if (isCancelled())
					isasync = false;
			}
			return null;
		}

		@Override
		protected void onPostExecute(Void result) { // 작업끝나고
			isasync = false;
			super.onPostExecute(result);
		}

		@Override
		protected void onCancelled() { // 취소할때
			isasync = false;
			super.onCancelled();
		}

		@Override
		protected void onProgressUpdate(Void... values) { // UI 업데이트

			super.onProgressUpdate(values);
		}

	}

	class SeekbarAsync extends AsyncTask<Void, Void, Void> {
		boolean isasync = true;
		int filelast =0;
		int cur = 0;
		@Override
		protected void onPreExecute() { // 작업시작전
		
		}

		@Override
		protected Void doInBackground(Void... params) { // 내부에서 하는작업
			while (isasync) {
				filelast = mPlayer.getDuration();
				cur = mPlayer.getCurrentPosition();
				
				KeyboardMouseActivity.media_seekbar.setProgress(((cutfileSize * (CUR_FILE_NUM+1))*cur)/filelast);
				try {
					Thread.sleep(1000);
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				if (isCancelled())
					isasync = false;
			}

			return null;
		}

		@Override
		protected void onPostExecute(Void result) { // 작업끝나고
			isasync = false;
			super.onPostExecute(result);
		}

		@Override
		protected void onCancelled() { // 취소할때
			isasync = false;
			super.onCancelled();
		}

		@Override
		protected void onProgressUpdate(Void... values) { // UI 업데이트
			super.onProgressUpdate(values);
		}

	}

}
